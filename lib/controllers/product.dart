import 'package:get/get.dart';
import 'package:dio/dio.dart';
import 'dart:math'; // Import th∆∞ vi·ªán ƒë·ªÉ random
import '../services/api_service.dart';
import '../models/product.dart';
import '../services/auth_service.dart';

class ProductController extends GetxController {
  late AuthService authService;
  var productList = [].obs; // Danh s√°ch s·∫£n ph·∫©m
  var isLoading = false.obs; // Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
  // var cart = <Product>[].obs; // üî• Gi·ªè h√†ng l∆∞u danh s√°ch s·∫£n ph·∫©m
  final Dio _dio = Dio(); // Kh·ªüi t·∫°o Dio
  var bestSellingProducts = [].obs; // Danh s√°ch s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
  var highestDiscountProducts =
      [].obs; // Danh s√°ch s·∫£n ph·∫©m c√≥ discount cao nh·∫•t
  // final ApiService _apiService = ApiService();

  final String baseUrl = 'https://dummyjson.com/products'; // URL API

  @override
  void onInit() {
    fetchProducts(); // L·∫•y danh s√°ch s·∫£n ph·∫©m khi kh·ªüi t·∫°o
    super.onInit();
  }

  // L·∫•y to√†n b·ªô danh s√°ch s·∫£n ph·∫©m
  void fetchProducts() async {
    try {
      isLoading(true);
      var response = await _dio.get(baseUrl);
      if (response.statusCode == 200) {
        List<dynamic> products = response.data['products'];

        // üü¢ Danh s√°ch th√†nh ph·ªë ƒë·ªÉ ch·ªçn ng·∫´u nhi√™n
        List<String> locations = [
          "Th√†nh ph·ªë H·ªì Ch√≠ Minh",
          "Th√†nh ph·ªë ƒê√† N·∫µng",
          "H√† N·ªôi",
          "Hu·∫ø"
        ];
        //  Danh s√°ch th√†nh ph·ªë ƒë·ªÉ ch·ªçn ng·∫´u nhi√™n
        List<String> sold = ["1,1k", "1,2k", "930", "1k"];

        Random random = Random(); // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Random

        // üü¢ Th√™m location /sold ng·∫´u nhi√™n cho t·ª´ng s·∫£n ph·∫©m
        for (var product in products) {
          product['location'] = locations[random.nextInt(locations.length)];
          product['sold'] = sold[random.nextInt(sold.length)];
          // L√†m tr√≤n rating ch·ªâ l·∫•y 1 s·ªë sau d·∫•u ph·∫©y
          if (product.containsKey('rating') && product['rating'] is double) {
            product['rating'] =
                double.parse(product['rating'].toStringAsFixed(1));
          }
        }

        // üü¢ L∆∞u danh s√°ch g·ªëc ƒë·ªÉ tr√°nh b·ªã thay ƒë·ªïi
        List<dynamic> originalProducts = List.from(products);

        // üü¢ S·∫Øp x·∫øp productList theo A-Z
        products.sort(
            (a, b) => a['title'].toString().compareTo(b['title'].toString()));
        productList.value = products;

        // üü¢ L·ªçc danh s√°ch b√°n ch·∫°y t·ª´ b·∫£n g·ªëc (kh√¥ng s·∫Øp x·∫øp A-Z)
        fetchBestSellingProducts(originalProducts);

        // üü¢ L·ªçc danh s√°ch s·∫£n ph·∫©m c√≥ discount cao nh·∫•t
        fetchHighestDiscountProducts(originalProducts);
      }
    } catch (e) {
      print("Error fetching products: $e");
    } finally {
      isLoading(false);
    }
  }

// // üî• Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
//   void addToCart(Product product) {
//     cart.add(product);
//     Get.snackbar("Gi·ªè h√†ng", "ƒê√£ th√™m ${product.title} v√†o gi·ªè!");
//   }

//   // üî• X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
//   void removeFromCart(Product product) {
//     cart.remove(product);
//     Get.snackbar("Gi·ªè h√†ng", "ƒê√£ x√≥a ${product.title} kh·ªèi gi·ªè!");
//   }

//   // üî• X√≥a to√†n b·ªô gi·ªè h√†ng
//   void clearCart() {
//     cart.clear();
//     Get.snackbar("Gi·ªè h√†ng", "ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng!");
//   }

  void fetchBestSellingProducts(List<dynamic> products) {
    List<dynamic> sortedProducts = List.from(products);

    // üü¢ S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng ƒë√°nh gi√° gi·∫£m d·∫ßn
    sortedProducts
        .sort((a, b) => (b['reviews'].length).compareTo(a['reviews'].length));

    bestSellingProducts.value =
        sortedProducts; // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m b√°n ch·∫°y
  }

  void fetchHighestDiscountProducts(List<dynamic> products) {
    List<dynamic> sortedProducts = List.from(products);
    Random random = Random();
    // üü¢ S·∫Øp x·∫øp theo discountPercent gi·∫£m d·∫ßn
    sortedProducts.sort(
        (a, b) => b['discountPercentage'].compareTo(a['discountPercentage']));
    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒë√£ b√°n random
    for (var product in sortedProducts) {
      int totalStock = random.nextInt(300) + 200; // Gi·∫£ s·ª≠ c√≥ t·ª´ 200 - 500 sp
      int soldStock = random.nextInt(totalStock ~/ 2) +
          50; // ƒê√£ b√°n t·ª´ 50 ƒë·∫øn m·ªôt n·ª≠a t·ªïng s·ªë
      product['totalStock'] = totalStock;
      product['soldStock'] = soldStock;
    }
    // üü¢ ƒê·∫£m b·∫£o danh s√°ch c√≥ ƒë·ªß s·∫£n ph·∫©m
    highestDiscountProducts.value = sortedProducts.length >= 6
        ? sortedProducts.take(6).toList()
        : sortedProducts;

    // üü¢ Debug in danh s√°ch
    print("S·∫£n ph·∫©m c√≥ discount cao nh·∫•t: ${highestDiscountProducts.length}");
  }

  // CREATE: Th√™m s·∫£n ph·∫©m m·ªõi
  Future<void> addProduct(Map<String, dynamic> newProduct) async {
    try {
      isLoading(true);
      var response = await _dio.post(baseUrl, data: newProduct);
      if (response.statusCode == 200 || response.statusCode == 201) {
        productList.add(response.data); // Th√™m s·∫£n ph·∫©m v√†o danh s√°ch
      }
    } catch (e) {
      print("Error adding product: $e");
    } finally {
      isLoading(false);
    }
  }

  // UPDATE: C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  Future<void> updateProduct(
      int id, Map<String, dynamic> updatedProduct) async {
    try {
      isLoading(true);
      var response = await _dio.put('$baseUrl/$id', data: updatedProduct);
      if (response.statusCode == 200) {
        // T√¨m s·∫£n ph·∫©m trong danh s√°ch v√† c·∫≠p nh·∫≠t
        int index = productList.indexWhere((product) => product['id'] == id);
        if (index != -1) {
          productList[index] = response.data;
        }
      }
    } catch (e) {
      print("Error updating product: $e");
    } finally {
      isLoading(false);
    }
  }

  // DELETE: X√≥a s·∫£n ph·∫©m
  Future<void> deleteProduct(int id) async {
    try {
      isLoading(true);
      var response = await _dio.delete('$baseUrl/$id');
      if (response.statusCode == 200) {
        // X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch
        productList.removeWhere((product) => product['id'] == id);
      }
    } catch (e) {
      print("Error deleting product: $e");
    } finally {
      isLoading(false);
    }
  }
}
